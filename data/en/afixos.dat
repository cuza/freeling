# ===============================================
#            Affixation rules file
# ===============================================

# === Each line is a affixation rule, with the following fields:
# 1 Affix to erase form word form (e.g: gatito - ito = gat)
# 2 Affix (* for emtpy string) to add to the resulting root
#   to rebuild the lemma that must be searched in dictionary 
#   (e.g:  gat+o = gato)
# 3 Regexp condition on the parole tag of found dictionary entry
# 4 Parole tag for suffixed word (* = keep tag in dictionary entry)
# 5 Check lemma adding accents
# 6 Enclitic suffix (special accent behaviour in Spanish)
# 7 Prevent later modules from assigning more tags to the word
# 8 Lemma to assign: any combination of: F,R,L,A,<literal> separated with '+'
#                    where: F=original form, R=root found in dict, 
# 		            L=lemma in matching dict entry, A=affix
#                    examples:  A+L=affix+lemma,  R=root,  R+mente= root+"mente"
# 9 Consider the suffix always, not only for unknown words.
# 10 How to retokenize the word if necessary (see uer manual).
#==============================================================


<Prefixes>
long-	*	^(VBN|VBG)	JJ	0	0	1	F	0	-
well-	*	^(VBN|VBG)	JJ	0	0	1	F	0	-
anti-	*	^(NN|JJ)	JJ	0	0	1	F	0	-
inter-	*	^(NN|JJ)	JJ	0	0	1	F	0	-
high-   *	^(NN|VBN|VBG)	JJ	0	0	1	F	0	-
low-    *	^(NN|VBN|VBG)	JJ	0	0	1	F	0	-
semi-	*	^(JJ|VBN)	JJ	0	0	1	F	0	-
self-	*	^(JJ|VBN|VBG)	JJ	0	0	1	F	0	-
un	*	^(JJ|VBN|VBG)   JJ	0	0	1	F	0	-
un	*	^NN		*	0	0	1	A+L	0	-
pre-    *	^(JJ|NN|VBN|VBG)  JJ	0	0	1	F	0	-
pre     *	^(JJ|NN|VBN|VBG)  JJ	0	0	1	F	0	-
post-	*	^(JJ|NN|VBN|VBG)  JJ	0	0	1	F	0	-
post	*	^(JJ|NN|VBN|VBG)  JJ	0	0	1	F	0	-
non-	*	^(JJ|VBN|VBG)	JJ	0	0	1	F	0	-
non	*	^(JJ|VBN|VBG)	JJ	0	0	1	F	0	-
multi-  *	^(JJ|NN|VBN)	JJ	0	0	1	F	0	-
multi   *	^(JJ|NN|VBN)	JJ	0	0	1	F	0	-
multi-  *	^NN		*	0	0	1	A+L	0	-
multi   *	^NN		*	0	0	1	A+L	0	-
non-	*	^NN		*	0	0	1	A+L	0	-
non	*	^NN		*	0	0	1	A+L	0	-
over-	*	^NN		*	0	0	1	A+L	0	-
over	*	^NN		*	0	0	1	A+L	0	-
under-	*	^NN		*	0	0	1	A+L	0	-
under	*	^NN		*	0	0	1	A+L	0	-
pre-	*	^NN		*	0	0	1	A+L	0	-
pre	*	^NN		*	0	0	1	A+L	0	-
half-	*	^NN		*	0	0	1	A+L	0	-
half	*	^NN		*	0	0	1	A+L	0	-
sub-	*	^NN		*	0	0	1	A+L	0	-
sub	*	^NN		*	0	0	1	A+L	0	-
super-	*	^NN		*	0	0	1	A+L	0	-
super	*	^NN		*	0	0	1	A+L	0	-
</Prefixes>

<Suffixes>

### Adverbs with -ly  ----------------
ally	*	^JJ	RB	0	0	0	F	0	-
bely	ble	^JJ	RB	0	0	0	F	0	-
ly	*|l|le	^JJ	RB	0	0	0	F	0	-
ily	y	^JJ	RB	0	0	0	F	0	-
ly	*	^VBG	RB	0	0	0	F	0	-

### Comparatives ------------

# wide->wider, fast->faster
er	*|e	^JJ	JJR	0	0	0	L	0	-
# grim->grimmer, big->bigger, glad->gladder, thin->thinner, fit->fitter
mmer	m	^JJ	JJR	0	0	0	L	0	-
gger	g	^JJ	JJR	0	0	0	L	0	-
dder	d	^JJ	JJR	0	0	0	L	0	-
nner	n	^JJ	JJR	0	0	0	L	0	-
tter	t	^JJ	JJR	0	0	0	L	0	-

# same for adverbs
er	*|e	^RB	RBR	0	0	0	L	0	-
mmer	m	^RB	RBR	0	0	0	L	0	-
gger	g	^RB	RBR	0	0	0	L	0	-
dder	d	^RB	RBR	0	0	0	L	0	-
nner	n	^RB	RBR	0	0	0	L	0	-
tter	t	^RB	RBR	0	0	0	L	0	-

### Superlatives -----------

# wide->widest, fast->fastest
est	*|e	^JJ	JJS	0	0	0	L	0	-
# grim->grimmest, big->biggest, glad->gladdest, thin->thinnest, fit->fittest
mmest	m	^JJ	JJS	0	0	0	L	0	-
ggest	g	^JJ	JJS	0	0	0	L	0	-
ddest	d	^JJ	JJS	0	0	0	L	0	-
nnest	n	^JJ	JJS	0	0	0	L	0	-
ttest	t	^JJ	JJS	0	0	0	L	0	-

# same for adverbs
est	*|e	^RB	RBS	0	0	0	L	0	-
mmest	m	^RB	RBS	0	0	0	L	0	-
ggest	g	^RB	RBS	0	0	0	L	0	-
ddest	d	^RB	RBS	0	0	0	L	0	-
nnest	n	^RB	RBS	0	0	0	L	0	-
ttest	t	^RB	RBS	0	0	0	L	0	-

</Suffixes>
